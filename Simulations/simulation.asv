%% Paramètres du système
clc
close all

%Vélo
Mv = 265.41/1000;            %Masse du vélo [kg]
Lv = 4/100;                  %Distance sol-CM [m]
Jv = 224468.05/(1000^3);     %Inertie du vélo [Kg*m^2]

%Roue inertielle
Mr = 15.73/100;         %Masse de la roue [kg]
Lr = 6/100;             %Distance sol-CM roue [m]
Jr = 14826/(1000^3);    %Inertie de la roue [Kg*m^2]

%Moteur
Km = 282.7054; %Gain statique
Tau_m = 0.04;

%Autres
Theta = 0;  %Angle du vélo par rapport à la vertical
Phi = 0;    %Angle de la roue inertielle
Tau = 0;    %Couple du moteur
g = 9.81;   %Accélération gravitationnel [m/s^2]

% Fonctions de transfert
s = tf('s');
H = Km/ ( Tau_m*s + 1 ); %phi_dot selon U
G = (-Jr*s)/( (Jv+Jr+Mv*Lv^2+Mr*Lr^2)*s^2 - (Mv*Lv+Mr*Lr)*g); %Theta(s)/Phi_dot(s)  => Angle du vélo selon vitesse roue inertielle



%% Contrôleur du moteur
%% Designeur de Matalab
[num_m, den_m] = tfdata(Cm, 'v');
Kp_m = num_m(1);
Kd_m = 0; %num_m(1);
Ki_m = num_m(2);

%% Pôles alignés
close all
clc

p = 10;
p1 = s+p+p*1i;
p2 = s+p-p*1i;
poles = p1*p2;

[num_m, den_m] = tfdata(poles, 'v');
Kp_m = (num_m(2) - 1)/Km;
Ki_m = num_m(3)/Km;
Kd_m = (1-Tau_m)/Km;

sim("Simulink/Moteur_BF")
dataList = {Phi_dot_des 'r' 'Commande [deg/sec]'; 
            Phi_dot 'b' 'Vitesse [deg/s]'};
            %Phi 'g' 'Position [deg]'};
dataOpt = {U 'k' 'Tension [V]'};

plot_func('Moteur en BF', 'Temps (s)', '', dataList, dataOpt);



%% Contrôleur du vélo
%% Designeur de Matlab
load Cv

[num_v, den_v] = tfdata(Cv, 'v');
Kp_v = num_v(2);
Kd_v = num_v(1);
Ki_v = num_v(3);

%% Pôles alignés
A = Mv*Lv^2 + Mr*Lr^2;
B = Mv*Lv 